process PROD  = {

    service = MessageLogger {
	untracked vstring destinations = {"cout"}
	untracked vstring categories = { "FwkJob" }
	untracked PSet cout = {
	    ## untracked PSet default = { untracked int32 limit = 0 }  # kill all messages in the log
	    ## untracked PSet FwkJob  = { untracked int32 limit = -1 } # except *all* of FwkJob's
	    # untracked string threshold = "DEBUG"
	    untracked string threshold = "INFO"
	}

	# turn on the following to get LogDebug output
	# ============================================
	# untracked vstring debugModules = { "lctproducer" }
	## untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
    }

    # service = Timing {}

    service = RandomNumberGeneratorService {
	untracked uint32 sourceSeed = 15932458
	PSet moduleSeeds = {
	    untracked uint32 VtxSmeared = 48543987
	    untracked uint32 g4SimHits = 9876
	}
    }
    # Step 1 : Event Generation
    #
    # Single muons
    #
    include "SimGeneral/HepPDTESSource/data/pythiapdt.cfi"

    source = FlatRandomPtGunSource {
#	untracked PSet maxEvents = {untracked int32 input = 1000}
	untracked int32 maxEvents = 1000
	untracked PSet PGunParameters = {
	    # you can request more than 1 particle
	    # untracked vint32  PartID = {211,11}
	    untracked vint32 PartID = { 13 }
	    untracked double MinEta = -2.5
	    untracked double MaxEta =  2.5
	    untracked double MinPhi = -3.14159265358979323846 # must be in radians
	    untracked double MaxPhi =  3.14159265358979323846
	    untracked double MinPt  = 49.99
	    untracked double MaxPt  = 50.01
	}
	untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
    }

    # Event vertex smearing - applies only once (internal check)
    # Note : all internal generators will always do (0,0,0) vertex
    #
    #include "IOMC/EventVertexGenerators/data/VtxSmearedGauss.cfi"
    include "Configuration/StandardSequences/data/VtxSmearedGauss.cff"

    #Geometry
    #
    #include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
    #es_module = TrackerGeometricDetESModule {}

    # Needed according to Mike Case's e-mail from 27/03.
    include "Geometry/MuonNumbering/data/muonNumberingInitialization.cfi"

    #Magnetic Field
    #
    # ??
    #include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

    # Step 2 : CMS Detector Simulation
    #
    # CMS Geant4-based Det.Simulation module (OscarProducer)
    #
    #include "SimG4Core/Application/data/SimG4Object.cfi"
    #include "Configuration/StandardSequences/data/Simulation.cff"

    # Step 3 : Digitization of the simulated hits
    #
    # Step 3c : Muon Digitization
    # this holds CSC geom service, as need for CSC digi's
    # and the digitizer itself
    #
    #include "Geometry/CSCGeometry/data/cscGeometry.cfi"
    #include "SimMuon/CSCDigitizer/data/muonCSCDigis.cfi"

    # Muon DT digi's
    # this holds geom.service as needed by DT digi's
    # and the digitizer itself
    #
    #include "Geometry/DTGeometry/data/dtGeometry.cfi"
    #include "SimMuon/DTDigitizer/data/muonDTDigis.cfi"

    # this holds geom.service for the RPC digi's
    # the digitizer itself still needs to be given explicitely
    # but since it has no parameters, it doesn't matter...
    # only maybe the label should be agreed upon...
    #
    #include "Geometry/RPCGeometry/data/rpcGeometry.cfi" 
    #include "SimMuon/RPCDigitizer/data/muonRPCDigis.cfi"

    include "SimG4Core/Application/data/SIM-DIGI.cff"

    # Mixing Module is *required* to simulated Ecal/Hcal/Muon digitization !
    #include "Configuration/StandardSequences/data/MixingNoPileUp.cff"

    # csc trigger primitives
    #=======================
    include "L1Trigger/CSCTriggerPrimitives/data/CSCTriggerPrimitivesProducer.cfi"
    replace lctproducer.alctParam.verbosity = 2
    replace lctproducer.clctParam.verbosity = 2
    replace lctproducer.tmbParam.verbosity  = 2

    # Step 4 : Output module
    #
    module GEN-SIM-DIGI = PoolOutputModule {
	untracked string fileName = "/data0/slava/test/muminus_pt50_CMSSW_1_4_0_pre3.root"
	untracked vstring outputCommands = {
	    "keep *",
#            "drop *_ecalUnsuppressedDigis_*_*",
#            "drop *_hcalDigis_*_*",
#            "drop *_siStripDigis_*_*",
##            "drop *_muonCSCDigis_*_*",
	    "drop *_muonDTDigis_*_*",
	    "drop *_muonRPCDigis_*_*",
#            "drop *_siPixelDigis_*_*",
	    "drop PSimHits_*_*_*",
	    "keep PSimHits_*_MuonCSCHits_*",
	    "drop PCaloHits_*_*_*"
	}
    }

    # Now order modules for execution
    #
    #sequence trDigi = {  siPixelDigis & siStripDigis }
    #sequence calDigi = { ecalUnsuppressedDigis & hcalDigis }
    #sequence muonDigi = { muonCSCDigis &  muonDTDigis & muonRPCDigis}
    #sequence doDigi = { trDigi & calDigi & muonDigi }
    #path p1 = { VtxSmeared, g4SimHits, mix, doDigi, lctproducer}
    #path p1 = { VtxSmeared, g4SimHits, mix, muonDigi, lctproducer}
    path p1 = { VtxSmeared, g4SimHits, mix, muonDigi}
    endpath outpath = { GEN-SIM-DIGI }
}
